name: Full Dev Docker Test
on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker tag to use for testing'
        required: false
        default: 'dev_v25'
        type: string
      stop_on_failure:
        description: 'Stop tests on first failure'
        required: false
        default: false
        type: boolean
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
    paths-ignore:
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md
      - readme/**
      - dockerfiles/**
      - Notebooks/**


jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'dev_v25' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx conditionally based on OS:
      - name: Set up Docker Buildx (Windows)
        if: runner.os == 'Windows'
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx (Unix)
        if: runner.os != 'Windows'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Get Git Commit Hash for Linux/macOS
      - name: Get Git Commit Hash (Unix)
        if: runner.os != 'Windows'
        run: echo "GIT_HASH=$(git rev-parse --short=9 HEAD)" >> $GITHUB_ENV

      # Get Git Commit Hash for Windows using PowerShell
      - name: Get Git Commit Hash (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $gitHash = (git rev-parse --short=9 HEAD).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "GIT_HASH=$gitHash"
      # Get Latest Release Tag for Linux/macOS
      - name: Get Latest Release Tag (Unix)
        if: runner.os != 'Windows'
        id: get_tag
        run: |
          TAG=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV
      # Get Latest Release Tag for Windows using PowerShell
      - name: Get Latest Release Tag (Windows)
        if: runner.os == 'Windows'
        id: get_tag_win
        shell: powershell
        run: |
          $response = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -UseBasicParsing
          $json = $response.Content | ConvertFrom-Json
          $tag = $json.tag_name
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TAG=$tag"
# Re-integrate once the other parts pass please Drew :)
      # Build and Push Dev_25 Docker Image for Unix using bash
      - name: Build and Push Dev_25 Docker Image (multi-arch, Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} \
            --push .

      # Build and Push Dev_v25 Docker Image for Windows using PowerShell
      - name: Build and Push Dev_25 Docker Image (multi-arch, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} --push .

  run_tests:
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        test:
          - name: "Help command test"
            command: "--help"
          - name: "English Fairseq headless single test"
            command: "--headless --script_mode full_docker --language eng --ebook \"tools/workflow-testing/test1.txt\" --tts_engine fairseq"
          - name: "English Fairseq headless batch test"
            command: "--headless --script_mode full_docker --language eng --ebooks_dir \"tools/workflow-testing\" --tts_engine fairseq"
          - name: "English Fairseq Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Fairseq Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Unusual Fairseq headless single test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq'
          - name: "Unusual Fairseq headless batch test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq'
          - name: "Unusual Fairseq Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebook "tools/workflow-testing/test1.txt" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Unusual Fairseq Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language urd-script_devanagari --ebooks_dir "tools/workflow-testing" --tts_engine fairseq --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Vits headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits'
          - name: "English Vits headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits'
          - name: "English Vits Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English Vits Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine vits --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English YourTTS headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts'
          - name: "English YourTTS headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts'
          - name: "English YourTTS Custom-Voice headless single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English YourTTS Custom-Voice headless batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine yourtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Default headless single test"
            command: '--headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt"'
          - name: "Default XTTS headless batch test"
            command: '--headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts'
          - name: "Default XTTS headless Custom-Voice single test"
            command: '--headless --script_mode full_docker --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "Default XTTS headless Custom-Voice batch test"
            command: '--headless --script_mode full_docker --ebooks_dir "tools/workflow-testing" --tts_engine xtts --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          - name: "English XTTS headless fine-tuned XTTS model single test"
            command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --fine_tuned AiExplained'   
          - name: "English XTTS headless fine-tuned XTTS model batch test"
            command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --fine_tuned AiExplained'
          #- name: "English Bark headless single test"
          #  command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark'
          #- name: "English Bark Custom-Voice headless batch test" # Marked out as it takes too long
          #  command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          #- name: "English Bark Custom-Voice headless single test"
          #  command: '--headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine bark --voice "voices/eng/elder/male/DavidAttenborough_24000.wav"'
          #- name: "English Bark headless batch test"
          #  command: '--headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine bark'            
          # Add more test configurations as needed
      fail-fast: ${{ inputs.stop_on_failure || false }}
    env:
      DOCKER_TAG: ${{ inputs.docker_tag || 'dev_v25' }}
    steps:
      - name: Prune all dangling Docker images
        run: docker image prune -f
      
      - name: Run ${{ matrix.test.name }} (with GPU if available, Unix)
        if: runner.os != 'Windows'
        shell: bash
        continue-on-error: ${{ !inputs.stop_on_failure }}
        run: |
          echo "Attempting to run with GPU support..."
          docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }} || \
          (echo "GPU run failed, trying without GPU support..." && docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }})
      
      - name: Run ${{ matrix.test.name }} (with GPU if available, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        continue-on-error: ${{ !inputs.stop_on_failure }}
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Attempting to run with GPU support..."
          try {
            docker run --rm --pull=always --gpus all ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }}
          } catch {
            Write-Host "GPU run failed, trying without GPU support..."
            docker run --rm --pull=always ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:${{ env.DOCKER_TAG }} ${{ matrix.test.command }}
          }
      
      - name: Prune all dangling Docker images
        run: docker image prune -f


  # The following tests are kept as comments for future implementation:
  # test_create_custom_xtts:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: Create the custom_xtts_test.zip for headless custom xtts model single test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: cp voices/eng/elder/male/DavidAttenborough_24000.wav ref.wav && zip -j custom_xtts_test.zip models/tts/tts_models--multilingual--multi-dataset--xtts_v2/config.json models/tts/tts_models--multilingual--multi-dataset--xtts_v2/model.pth models/tts/tts_models--multilingual--multi-dataset--xtts_v2/vocab.json ref.wav && rm -f ref.wav
  # test_xtts_custom_single:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: English xtts headless custom xtts model single test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev_v25 --headless --script_mode full_docker --language eng --ebook "tools/workflow-testing/test1.txt" --tts_engine xtts --custom_model "custom_xtts_test.zip"
  # test_xtts_custom_batch:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: English xtts headless custom xtts model batch test docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev
  #       run: docker run ${{ secrets.DOCKER_USERNAME }}/ebook2audiobook:dev_v25 --headless --script_mode full_docker --language eng --ebooks_dir "tools/workflow-testing" --tts_engine xtts --custom_model "custom_xtts_test.zip"
